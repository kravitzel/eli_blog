{
  "hash": "db0ca28d07e59d733259a5e07e0ab9b0",
  "result": {
    "markdown": "---\ntitle: \"Collaborating With Local Git Repositories\"\nsubtitle: \"Low Tech Data Science\"\ndate: 2022-02-23\nauthor: \"Eli S. Kravitz\"\ncategories: [Git, low-tech]\nengine: knitr\nexecute: \n  eval: false\nformat: \n  html:\n    df-print: default\n---\n\n\n## Background\n\nI often work with restricted data that has to be isolated on its own network. That means no access to Github for version control. I set up a Git repository that's stored locally. It lets me and my collaborators work on version control without having internet access. I couldn't find many resources for setting this up, so I decided to put this post together.\n\nThis is also a tutorial for collaborators who are new to Git; some terminology is simplified and some steps are explain in more detail than is strictly necessary.\n\n## Preliminaries\n\nThis assumes some basic familiarity with Git and Github. If you don't have this background, check out [Happy Git and GitHub for the userR](https://happygitwithr.com/index.html) by Jennifer Bryan for an R focused introduction to Git or [GitHowTo](https://githowto.com/) for a language agnostic introduction.\n\nYou need to set a user name and email address for Git. These are displayed when you commit changes; they will not be connected to any of your actual accounts.\n\nEnter the following in the console.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config --global user.name \"Hugh Jazz\" # Replace with your name\ngit config --global user.email \"hugh.jazz@hotmail.com\" # Replace with your email\n```\n:::\n\n\nYou can check your `config` settings with `git config -l` or `git config --list`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config --l\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n## user.name=\"Hugh Jazz\"\n## user.email=\"hugh.jazz@hotmail.gov'\n```\n:::\n\n\nI recommend adding the following command to your `git config`. This command allows you to type `git hist` to see a cleanly formatted history of your repository.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n\n```\n:::\n\n\n## Setting up a Local Remote Repository\n\nInstead of Github hosting our remote repository, we'll place our remote in a directory on shared network drive that all project members have access to. Git. We need to make a [bare repository](https://stegosaurusdormant.com/bare-git-repo/). A bare repository contains only the information Git needs to create the files in the repository and their history. It does not directly contain the files you are editing (the \"Working Tree\").\n\nThis guide sets up a repository `/user/example_project.git` to illustrate the steps. Note that `example_project.git` is a directory, not a `.git` file. It's customary to give bare repos a .git extension.\n\nInitiate the bare repository:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir /user/example_project.git  # Bare repos are customarily given a .git extension\ncd /user/example_project.git\ngit init --bare \n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n## Initialized empty Git repository in /user/your_directory/example_project.git\n```\n:::\n\n\nUsers cannot work in bare repositories directly. You need to clone the repo and push changes.\n\nI clone clone the repo, add some basic structure to the project, then push the changes to remote. You should (but aren't required) to give the local repo the same name as the remote. For illustration, I append `_local` to the end of my local repo to distinguish it from the remote.\n\nMake a git repo:\n\n\n::: {.cell engine.opts='-l'}\n\n```{.bash .cell-code}\nmkdir /user/eli/some/file/path/example_project_local # Make empty directory\ncd  /user/eli/some/file/path/example_project_local\ngit init\ngit remote add origin /user/example_project.git  # connect the remote\n```\n:::\n\n\nVerify that you set the remote correctly\n\n\n::: {.cell engine.opts='-l'}\n\n```{.bash .cell-code}\ngit remote -v\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n## origin /user/example_project.git (fetch)\n## origin /user/example_project.git (push)\n```\n:::\n\n\nI add a `README.md` file, some folders, and dummy files to my local repository. You can do this in Dolphin or from the console. Nothing is specifically required in this step. Make sure to open RStudio and [assosciate this directory with a project](https://r4ds.had.co.nz/workflow-projects.html#rstudio-projects) so you can use RStudio's Git GUI later. **Do not** select the \"Create a git repository\" checkbox. You'll know if you set up a RStudio project if you see a `.Rproj` file in your directory.\n\nMy repo looks like this:\n\n\n\n````default\n.git\\\nR\\\ndummy_file.R\ndata\\\ndocumentation\\\nimportant_text_file.txt\n.gitignore\nexample_repo_eli.Rproj\nREADME.md\n````\n\n\nI edit the .gitignore file to not track `csv` or SAS files. These files are usually large and should be stored in `proejcts/data`. Important data files can be manually added with `git commit --force some_data_file.csv`.\n\nMy `.gitignore` has the following lines.\n\n``` markdown\n.Rproj.user\n.Rhistory\n.Rdata\n*.csv\n*sas7bdat\n*.sas7bcat\n*.xpt\n```\n\nThe first commit and push need to be done from console. After that you can use RStudio or continue using the console.\n\n\n::: {.cell engine.opts='-l'}\n\n```{.bash .cell-code}\ngit add *\ngit add .gitignore\ngit commit -am \"Initial commit\" \ngit push -u origin master\n```\n:::\n\n\n## Setup for Remaining Users\n\nFirst time users need to use console to clone a local copy of the remote. After that, users can use RStudio's Git GUI to stage, commit, push, and pull from the local repository. RStudio will track *all* files, not just `.R`, `.Rds`, and other R files. Users may also continue to use Git from the console.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /projects/users/YOUR_USERNAME/\ngit clone /projects/programs/sipp_cps_project.git # Puts repo into a folder called example_repo\n```\n:::\n\n\n## Typical Workflow\n\nAfter the initial setup, the workflow is the same as using Github. You can commit, push, pull, revert changes, and make new branches from RStudio or the console. Instructions for using Git in Rstudio are available in [Section 4.9](https://book.cds101.com/how-to-stage-commit-and-push-to-github-using-rstudio-server.html) of Introduction to Computational and Data Science. Example console input is provided below:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit pull # If you need to update you branch from remote\n\ngit add * # Add your files \ngit commit -am \"My commit message\" \ngit push \n```\n:::\n\n\nThe workflow is the same as if you were using Git with Github:\n\n1.  **Pull** from the remote repository to sync changes to your local repository\n2.  **Stage** files to indicate what you want Git to track\n3.  **Commit** your local changes to take a \"snapshot\" of the work you staged in the previous step\n4.  **Push** your changes to remote to include your local changes in the \"global\" repository\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}